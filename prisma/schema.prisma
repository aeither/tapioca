datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PaymentStatus {
  SUCCEEDED
  PENDING
  FAILED
  PREPARING
  READY
  SERVED
}

model Product {
  id          String  @id @default(cuid())
  title       String
  description String?
  price       Float
  imageUrl    String?

  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  // Project that the link belongs to
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([orderId])
}

model Order {
  id              String        @id @default(cuid())
  status          PaymentStatus @default(PENDING)
  amount          Float
  products        Product[]
  reference       String?       @unique
  shopAddress     String
  table           Int?
  customerAddress String?
  notes           String?
  archived        Boolean       @default(false) // whether the link is archived or not
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  User            User?         @relation(fields: [userId], references: [id])
  userId          String?

  @@index([userId])
}
